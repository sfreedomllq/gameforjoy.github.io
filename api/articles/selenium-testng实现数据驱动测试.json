{"title":"selenium+testng实现数据驱动测试","slug":"selenium-testng实现数据驱动测试","date":"2018-11-24T03:25:19.000Z","updated":"2018-11-24T13:29:12.124Z","comments":true,"path":"api/articles/selenium-testng实现数据驱动测试.json","photos":[],"link":"","excerpt":"selenium+testng实现数据驱动测试注：所有的博文中基本不会提及环境搭建项目创建之类的内容，前人所述甚多， 请自行百度/Google/Wiki查询。一般情况下我的代码中也不会有太多注释，因为在解释中都会说明，请自行对照理解。思路selenium我们都知道是用来做功能自动化测试的工具， 在实际使用的时候， 就会发现有很多局限性。 比如有这么一个场景： 模拟N个不同账号的登录。<br>分解一下步骤：<br>1.打开登录网页<br>2.输入账号密码，登录<br>3.验证登录成功，退出登陆<br>4.重复以上操作<br>单独使用selenium实现的话就非常繁琐了， N个账号， 难道我们要写N个输入的case吗？但从结果不考虑其它因素的话当然可以，但是这样的做法有很多问题，比如：<br>1.在编写脚本的时候已经手动输入了每组账号密码，速度恐怕还没有直接手工测试来的快。<br>2.执行脚本时， 如果当中某一个case出了问题， 那么脚本就停止了， 后续不会再继续执行。<br>3.如果要求执行此脚本之后继续执行其它脚本， 还需要人工监控等到此脚本执行结束， 再手动执行其它脚本。 需要手动的自动化测试， 我是很想吐槽啊。<br>这种时候就需要借助外力了， 比如testng。<br>什么是testng？ 不作赘述， 简单来说就是一个帮助测试的框架工具。 好处太多说不过来， 对于目前的我们来说只需要知道， 用它可以解决我们上面所说的所有问题。<br>总结一下就是： selenium编写基础脚本， testng可以帮我们进行自动化脚本的控制。","covers":["/2018/11/24/selenium-testng实现数据驱动测试/1.jpg"],"content":"<h1 id=\"selenium-testng实现数据驱动测试\"><a href=\"#selenium-testng实现数据驱动测试\" class=\"headerlink\" title=\"selenium+testng实现数据驱动测试\"></a>selenium+testng实现数据驱动测试</h1><hr>\n<p>注：所有的博文中基本不会提及环境搭建项目创建之类的内容，前人所述甚多， 请自行百度/Google/Wiki查询。一般情况下我的代码中也不会有太多注释，因为在<strong>解释</strong>中都会说明，请自行对照理解。</p>\n<hr>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>selenium我们都知道是用来做功能自动化测试的工具， 在实际使用的时候， 就会发现有很多局限性。 比如有这么一个场景： 模拟N个不同账号的登录。<br>分解一下步骤：<br>1.打开登录网页<br>2.输入账号密码，登录<br>3.验证登录成功，退出登陆<br>4.重复以上操作<br>单独使用selenium实现的话就非常繁琐了， N个账号， 难道我们要写N个输入的case吗？但从结果不考虑其它因素的话当然可以，但是这样的做法有很多问题，比如：<br>1.在编写脚本的时候已经手动输入了每组账号密码，速度恐怕还没有直接手工测试来的快。<br>2.执行脚本时， 如果当中某一个case出了问题， 那么脚本就停止了， 后续不会再继续执行。<br>3.如果要求执行此脚本之后继续执行其它脚本， 还需要人工监控等到此脚本执行结束， 再手动执行其它脚本。 需要手动的自动化测试， 我是很想吐槽啊。<br>这种时候就需要借助外力了， 比如testng。<br>什么是testng？ 不作赘述， 简单来说就是一个帮助测试的框架工具。 好处太多说不过来， 对于目前的我们来说只需要知道， 用它可以解决我们上面所说的所有问题。<br>总结一下就是： selenium编写基础脚本， testng可以帮我们进行自动化脚本的控制。</p>\n<a id=\"more\"></a>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>为了让读者更容易实践， 这里选择 <del><strong>百度</strong></del> 登录， 用同一账号的反复登录模拟多账号的登录情形（事实证明选择百度做此测试是一个很蠢的行为，账号的连续登录退出会引发登录的手机短信验证，要知道发现此问题的这时候我已经写完了所有的脚本…..ORZ）。<br>基于以上问题，选择一个折中<del>（其实是懒得再换个网站重写一遍脚本）</del>的办法：输入框的反复输入来验证数据的读写（测试数据为 AAA, BBB, CCC）。 在执行完此脚本 LoginTest 之后，要求再执行一个查询的脚本 SearchTest （测试数据为 ABCD）。<br>废话少说，上代码。</p>\n<p><strong>LoginTest.java</strong><br><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class LoginTest extends FeedTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    WebDriver wd;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test(dependsOnMethods = &quot;openTest&quot;, dataProvider = &quot;feeder&quot;)</span><br><span class=\"line\">    @Source(&quot;data/test_data.csv&quot;)</span><br><span class=\"line\">    public void loginTest(String keyWord)&#123;</span><br><span class=\"line\">        WebElement kw_input = wd.findElement(By.id(&quot;kw&quot;));</span><br><span class=\"line\">        kw_input.clear();</span><br><span class=\"line\">        kw_input.sendKeys(keyWord);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">//    public void loginTest(String username, String password, String expected)&#123;</span><br><span class=\"line\">//        wd.findElement(By.linkText(&quot;登录&quot;)).click();</span><br><span class=\"line\">//        wd.findElement(By.className(&quot;tang-pass-footerBarULogin&quot;)).click();</span><br><span class=\"line\">//        wd.findElement(By.className(&quot; pass-text-input-userName&quot;)).sendKeys(username);</span><br><span class=\"line\">//        wd.findElement(By.className(&quot;pass-text-input-password&quot;)).sendKeys(password);</span><br><span class=\"line\">//        wd.findElement(By.className(&quot;pass-checkbox-memberPass&quot;)).click();</span><br><span class=\"line\">//        wd.findElement(By.className(&quot;pass-button-submit&quot;)).click();</span><br><span class=\"line\">//        Assert.assertEquals((wd.findElement(By.className(&quot;user-name&quot;)).getText()), expected);</span><br><span class=\"line\">//        wd.findElement(By.className(&quot;quit&quot;)).click();</span><br><span class=\"line\">//        wd.findElement(By.xpath(&quot;//*[@id=&apos;tip_con_wrap&apos;]/div[3]/a[3]&quot;)).click();</span><br><span class=\"line\">//    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void openTest()&#123;</span><br><span class=\"line\">        wd.get(&quot;https://www.baidu.com/&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @BeforeClass</span><br><span class=\"line\">    public void beforeClass() &#123;</span><br><span class=\"line\">        wd = new ChromeDriver();</span><br><span class=\"line\">        wd.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);</span><br><span class=\"line\">        wd.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);</span><br><span class=\"line\">        wd.manage().window().maximize();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @AfterClass</span><br><span class=\"line\">    public void afterClass()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div></p>\n<p><strong>SearchTest.java</strong><br><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SearchTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    WebDriver wd;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void searchTest()&#123;</span><br><span class=\"line\">        wd.get(&quot;https://www.baidu.com/&quot;);</span><br><span class=\"line\">        wd.findElement(By.id(&quot;kw&quot;)).sendKeys(&quot;ABCD&quot;);</span><br><span class=\"line\">        wd.findElement(By.id(&quot;su&quot;)).click();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @BeforeClass</span><br><span class=\"line\">    public void beforeClass() &#123;</span><br><span class=\"line\">        wd = new ChromeDriver();</span><br><span class=\"line\">        wd.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);</span><br><span class=\"line\">        wd.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);</span><br><span class=\"line\">        wd.manage().window().maximize();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @AfterClass</span><br><span class=\"line\">    public void afterClass()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div></p>\n<p><strong>testng.xml</strong><br><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;suite name=&quot;All Test Suite&quot;&gt;</span><br><span class=\"line\">    &lt;test verbose=&quot;2&quot; preserve-order=&quot;true&quot; name=&quot;D:/IDWorkspace/SeleniumTest&quot;&gt;</span><br><span class=\"line\">        &lt;classes&gt;</span><br><span class=\"line\">            &lt;class name=&quot;com.gameforjoy.LoginTest&quot;&gt;</span><br><span class=\"line\">                &lt;methods&gt;</span><br><span class=\"line\">                    &lt;include name=&quot;loginTest&quot;/&gt;</span><br><span class=\"line\">                    &lt;include name=&quot;openTest&quot;/&gt;</span><br><span class=\"line\">                &lt;/methods&gt;</span><br><span class=\"line\">            &lt;/class&gt;</span><br><span class=\"line\">            &lt;class name=&quot;com.gameforjoy.SearchTest&quot;&gt;</span><br><span class=\"line\">                &lt;methods&gt;</span><br><span class=\"line\">                    &lt;include name=&quot;searchTest&quot;/&gt;</span><br><span class=\"line\">                &lt;/methods&gt;</span><br><span class=\"line\">            &lt;/class&gt;</span><br><span class=\"line\">        &lt;/classes&gt;</span><br><span class=\"line\">    &lt;/test&gt;</span><br><span class=\"line\">&lt;/suite&gt;</span><br></pre></td></tr></table></figure></div></p>\n<p>测试结果如下：</p>\n<p><img src=\"/2018/11/24/selenium-testng实现数据驱动测试/1.jpg\" alt=\"alt\"></p>\n<p>可以看到所有测试用例全部通过，证明我们成功读取了文件中的测试数据，控制台中的ERROR错误是因为缺失 log4j2 的配置文件，除了没有测试报告文件输出以外无任何影响。</p>\n<h2 id=\"解释\"><a href=\"#解释\" class=\"headerlink\" title=\"解释\"></a>解释</h2><p>这里我们来做一些细节上的补充解释。<br>首先 <code>@Test @Source</code> 这些我们称之为“注解”， 有兴趣的可以去了解一下“JAVA注解” 。注解(Annotation)相当于一种标记，在程序中加入注解就等于为程序打上某种标记。 比如 @Test 就表明了这一方法是一个测试用例。 注解的名字已经表明了其用处，所已通过 <code>@Source(&quot;data/test_data.csv&quot;)</code> 我们可以得知测试数据文件的位置：项目根目录/data/test_data.csv 。</p>\n<p>其次，testng中， @Test 的测试用例执行顺序是根据方法命名的字母先后排序来执行的 ，所以在不给 @Test 添加其余参数的时候，LoginTest 中的 loginTest() 会在 openTest() 方法之前执行，这就意味着在打开网页之前我们就开始执行了输入操作，那程序必然会报错了。在不改变方法命名的前提下，<code>@Test(dependsOnMethods = &quot;openTest&quot;, dataProvider = &quot;feeder&quot;)</code> 中的 <code>dependsOnMethods</code> 很好的解决了这个问题。 <code>dependsOnMethods = &quot;openTest&quot;</code> 说明了 loginTest() 方法是依赖于 openTest() 方法的，所以会在其后执行，另外 <code>dataProvider = &quot;feeder&quot;</code> 指明了我们的数据驱动器 feed4testng , 可以去 <a href=\"https://mvnrepository.com/\" target=\"_blank\" rel=\"noopener\">https://mvnrepository.com/</a> 中搜索获取（这一步其实已经告诉大家以后发现缺失某依赖包的解决办法了）。<br>LoginTest类中注释的方法之所以没删， 是因为有这么一句 <code>Assert.assertEquals((wd.findElement(By.className(&quot;user-name&quot;)).getText()), expected);</code> ，我们将之称为“断言” 。当我们在测试工作中需要做出某些验证或判断时，就可以用上“断言”，简单来说可以当作一个简写的 <code>if() else</code> 来理解。如果有需要的话也许会单独写一篇来解释。<br>然后看一下 testng.xml 文件。<code>&lt;class&gt;</code> 标签中的 <code>name</code> 属性指明了需要执行的脚本 <code>&lt;method&gt;</code> 标签下是测试用例执行方法，需要执行多少个测试脚本，就在此文件中进行配置就好。</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>这里我想提一下，我所放出的所有代码（方法，配置文件等）亲测都可成功，但是我并没有给出具体的一步一步的执行步骤以及完全的运行环境。 但其实在博文中我都给出了碰到问题的解决方法。Copy代码跑出结果不是最重要的，重要的是思想，是要看懂配置文件的意思，看懂代码的逻辑。写作之前先要有足够的阅读量，然后构思，最后执笔。<br>编程，也是一个道理。</p>\n","categories":[{"name":"测试相关","slug":"测试相关","count":2,"path":"api/categories/测试相关.json"}],"tags":[{"name":"selenium","slug":"selenium","count":2,"path":"api/tags/selenium.json"},{"name":"testng","slug":"testng","count":1,"path":"api/tags/testng.json"},{"name":"数据驱动","slug":"数据驱动","count":1,"path":"api/tags/数据驱动.json"},{"name":"自动化测试","slug":"自动化测试","count":1,"path":"api/tags/自动化测试.json"}]}