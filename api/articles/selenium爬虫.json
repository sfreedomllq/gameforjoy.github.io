{"title":"selenium编写简单爬虫","slug":"selenium爬虫","date":"2018-11-23T10:03:24.927Z","updated":"2018-11-23T16:24:45.308Z","comments":true,"path":"api/articles/selenium爬虫.json","photos":[],"link":"","excerpt":"用Selenium编写简单爬虫思路一般说到爬虫都是想到用python scrapy去写， 思路就是定位需要的数据所在元素， 然后进行相应处理。 说到元素定位， selenium中也拥有丰富的元素定位方法， 只是我们在定位了元素之后都是用来测试用，那么元素定位之后直接进行数据的提取和处理， 不也就成了一个爬虫了嘛。","covers":null,"content":"<h1 id=\"用Selenium编写简单爬虫\"><a href=\"#用Selenium编写简单爬虫\" class=\"headerlink\" title=\"用Selenium编写简单爬虫\"></a>用Selenium编写简单爬虫</h1><hr>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>一般说到爬虫都是想到用python scrapy去写， 思路就是定位需要的数据所在元素， 然后进行相应处理。 说到元素定位， selenium中也拥有丰富的元素定位方法， 只是我们在定位了元素之后都是用来测试用，那么元素定位之后直接进行数据的提取和处理， 不也就成了一个爬虫了嘛。</p>\n<a id=\"more\"></a>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>创建什么的就不说了，直接上代码。</p>\n <div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> public class SimpleSpider &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    WebDriver wd;</span><br><span class=\"line\">    String fileName = &quot;projects.txt&quot;;</span><br><span class=\"line\">    </span><br><span class=\"line\">  @Test</span><br><span class=\"line\">  public void spider() throws IOException &#123;</span><br><span class=\"line\">      wd.get(&quot;https://github.com/sfreedomllq&quot;);</span><br><span class=\"line\">      List&lt;WebElement&gt; we = wd.findElements(By.cssSelector(&quot;.repo.js-repo&quot;));</span><br><span class=\"line\">      FileWriter writer=new FileWriter(fileName);</span><br><span class=\"line\">      Iterator iterator = we.iterator();</span><br><span class=\"line\">      while (iterator.hasNext())</span><br><span class=\"line\">          writer.write(((WebElement) iterator.next()).getAttribute(&quot;title&quot;)+&quot;\\r\\n&quot;);</span><br><span class=\"line\">      writer.close();</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  @BeforeMethod</span><br><span class=\"line\">  public void beforeMethod() &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @AfterMethod</span><br><span class=\"line\">  public void afterMethod() &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @BeforeClass</span><br><span class=\"line\">  public void beforeClass() &#123;</span><br><span class=\"line\">      wd = new ChromeDriver();</span><br><span class=\"line\">      wd.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);</span><br><span class=\"line\">      wd.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);</span><br><span class=\"line\">      wd.manage().window().maximize();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @AfterClass</span><br><span class=\"line\">  public void afterClass() &#123;</span><br><span class=\"line\">      wd.quit();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>这段代码爬取了我个人github主页上的所有项目名称，并以txt文件的形式输出，亲测可行。</p>\n<h2 id=\"解释\"><a href=\"#解释\" class=\"headerlink\" title=\"解释\"></a>解释</h2><p>因为这几天在看testng，所以就顺手建了一个testng的class，这并不影响。<br>首先定义了一个 WebDriver 取名 wd 以及我们数据需要保存的文件名称，我取名叫 project.txt 。<br>在 beforeClass() 中我们将 wd 实例化成了一个 ChromeDriver  。 然后设置隐性等待时间和加载时间，顺便把窗口最大化了。<br><code>@Test</code> 下本是我们写执行测试用例的方法的地方， 这里我们要做爬虫操作， 还是换汤不换药的写方法， 取名叫 <code>spider（）</code>。<br>在该方法中我们首先通过 <code>get()</code> 方法打开了一个网页，也就是我的github首页。然后通过cssSelector定位到我们需要爬取的元素并存放到一个List中(关于元素的定位请自行找个网页慢慢练习)。这时候我们已经有了需要的数据，接下来要将这些数据写入文件中，所以实例化一个 FileWriter 对象，然后对List进行遍历并将数据写入文件中。最后别忘了关闭文件流 。<br>执行完 <code>@Test</code> 下的代码之后， testng会执行 <code>@afterClass</code> 中的代码，我们在 after Class() 中关闭浏览器。<br>好了，大功告成。</p>\n","categories":[{"name":"Selenium","slug":"Selenium","count":1,"path":"api/categories/Selenium.json"}],"tags":[{"name":"selenium","slug":"selenium","count":1,"path":"api/tags/selenium.json"},{"name":"爬虫","slug":"爬虫","count":1,"path":"api/tags/爬虫.json"}]}