{"total":7,"pageSize":10,"pageCount":1,"data":[{"title":"git指南","slug":"git指南","date":"2018-12-04T08:05:33.000Z","updated":"2018-12-04T09:20:00.328Z","comments":true,"path":"api/articles/git指南.json","excerpt":"<h1 id=\"git中级指南\"><a href=\"#git中级指南\" class=\"headerlink\" title=\"git中级指南\"></a>git中级指南</h1><h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><p>git status  //查看当前状态</p>\n<p>git log  //查看当前分支commit logs</p>\n<p>git add . //添加当前文件夹下所有变动</p>\n<p>git reset HEAD //重置 HEAD 的状态</p>\n<p>git commit -m “commit message” //commit操作</p>\n<p>git checkout branch_name //检出分支</p>\n<p>git checkout 23abef // 检出指定commit</p>\n<p>git checkout . //还原尚未分级的改动</p>\n<p>git checkout -b branch_name //新建分支<br></p>","keywords":null,"cover":"/2018/12/04/git指南/1.jpg","content":null,"text":"git中级指南常用命令git status  //查看当前状态git log  //查看当前分支commit logsgit add . //添加当前文件夹下所有变动git reset HEAD //重置 HEAD 的状态git commit -m “commit message","link":"","raw":null,"photos":[],"categories":[{"name":"文档","slug":"文档","count":2,"path":"api/categories/文档.json"}],"tags":[{"name":"git","slug":"git","count":1,"path":"api/tags/git.json"}]},{"title":"爬虫的具体应用：把gitbook变成自己的书库","slug":"爬虫的具体应用：把gitbook变成自己的书库","date":"2018-12-03T01:15:49.000Z","updated":"2018-12-03T07:28:24.513Z","comments":true,"path":"api/articles/爬虫的具体应用：把gitbook变成自己的书库.json","excerpt":"<h1 id=\"把gitbook变成自己的书库\"><a href=\"#把gitbook变成自己的书库\" class=\"headerlink\" title=\"把gitbook变成自己的书库\"></a>把gitbook变成自己的书库</h1><p>这篇文章中我们会从针对 gitbook 编写一个爬虫程序，该程序可以从 gitbook 网站中爬取我们想要的书并保存为pdf文件。主要应用到的技术点包括 beautifulsoup+requests， PyPDF2 。<br>为什么不用 scrapy？ 首先我们这种量级的爬虫程序用 scrapy 有点大材小用了。 其次，用 beautifulsoup+requests 可以帮助我们理解工作逻辑， 以及一些紧急措施的制定实行， 这在程序的编写中尤其重要。</p>\n<h2 id=\"思路-amp-准备\"><a href=\"#思路-amp-准备\" class=\"headerlink\" title=\"思路&amp;准备\"></a>思路&amp;准备</h2><p>思路很简单： beautifulSoup+requests 实现对需求数据的爬取， 然后进行一定的数据处理保存为html文件，再通过 PyPDF2 将保存好的html文件转换成pdf文件。<br><strong>准备：</strong></p>\n<ol>\n<li>安装 requests、 beautifulsoup、 pdfkit，reuqests 用于网络请求，beautifusoup 用于操作html数据， pdfkit 是 wkhtmltopdf 的Python封装包；</li>\n<li>安装 wkhtmltopdf，wkhtmltopdf 是一个适用于多平台的实现html对pdf转换的工具；</li>\n<li>安装 PyPDF2，此工具用于对pdf的融合。</li>\n</ol>","keywords":null,"cover":null,"content":null,"text":"把gitbook变成自己的书库这篇文章中我们会从针对 gitbook 编写一个爬虫程序，该程序可以从 gitbook 网站中爬取我们想要的书并保存为pdf文件。主要应用到的技术点包括 beautifulsoup+requests， PyPDF2 。<br>为什么不用 scrapy","link":"","raw":null,"photos":[],"categories":[{"name":"实践","slug":"实践","count":1,"path":"api/categories/实践.json"}],"tags":[{"name":"beautifulsoup","slug":"beautifulsoup","count":1,"path":"api/tags/beautifulsoup.json"},{"name":"requests","slug":"requests","count":1,"path":"api/tags/requests.json"},{"name":"PyPDF2","slug":"PyPDF2","count":1,"path":"api/tags/PyPDF2.json"},{"name":"gitbook","slug":"gitbook","count":1,"path":"api/tags/gitbook.json"},{"name":"爬虫","slug":"爬虫","count":2,"path":"api/tags/爬虫.json"}]},{"title":"appuim问题合集（持续更新）","slug":"appuim问题合集（持续更新）","date":"2018-12-01T15:44:18.000Z","updated":"2018-12-02T06:36:41.451Z","comments":true,"path":"api/articles/appuim问题合集（持续更新）.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"appuim问题合集（持续更新）\"><a href=\"#appuim问题合集（持续更新）\" class=\"headerlink\" title=\"appuim问题合集（持续更新）\"></a>appuim问题合集（持续更新）</h1><h2 id=\"uiautomatorviewer-bat无法获取设备截图\"><a href=\"#uiautomatorviewer-bat无法获取设备截图\" class=\"headerlink\" title=\"uiautomatorviewer.bat无法获取设备截图\"></a>uiautomatorviewer.bat无法获取设备截图</h2><p>先看报错信息，如果details里给的是 InvocationTargetException ，确认一下自己设备的 android 版本是不是大于8.0的，如果是的话，恭喜你，换个系统版本低于8.0的设备吧，。这个问题我搜了2个小时，除了CSDN上面挂积分的帖子和更换设备系统版本以外基本无解，当然CSDN那些不知道什么玩意的帖子还是算了吧，不指望（我真的很想喷这个破网站，真心话，曾经还用明文存储用户密码；作为技术交流地还设立会员制度积分制度赚取利益，呵呵。）。<br>或者使用<br><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb shell uiautomator dump /sdcard/app.uix</span><br><span class=\"line\">adb pull /sdcard/app.uix F:/app.uix</span><br><span class=\"line\">adb shell screencap -p /sdcard/app.png</span><br><span class=\"line\">adb pull /sdcard/app.png F:/app.png</span><br></pre></td></tr></table></figure></div></p>\n<p>来手动截图并从测试机拉取到本地，再用 uiautomatorviewer 打开，但在运行 pull 命令的时候容易遇到问题 <code>No such file or directory</code> ，这个问题是因为文件的操作权限不够，想修改操作权限请去 <code>adb shell</code> 进行尝试。<br>如果是其它错误的话，搜对应错误信息去解决吧，都不难。</p>\n","text":"appuim问题合集（持续更新）uiautomatorviewer.bat无法获取设备截图先看报错信息，如果details里给的是 InvocationTargetException ，确认一下自己设备的 android 版本是不是大于8.0的，如果是的话，恭喜你，换个系统版本低","link":"","raw":null,"photos":[],"categories":[{"name":"appuim","slug":"appuim","count":1,"path":"api/categories/appuim.json"}],"tags":[{"name":"appuim","slug":"appuim","count":1,"path":"api/tags/appuim.json"}]},{"title":"通过简单算法浅谈学习方法","slug":"通过简单算法浅谈学习方法","date":"2018-11-24T12:24:01.000Z","updated":"2018-11-24T13:22:44.467Z","comments":true,"path":"api/articles/通过简单算法浅谈学习方法.json","excerpt":"<h1 id=\"通过简单算法浅谈学习方法\"><a href=\"#通过简单算法浅谈学习方法\" class=\"headerlink\" title=\"通过简单算法浅谈学习方法\"></a>通过简单算法浅谈学习方法</h1><p>先说两个简单的算法。</p>\n<h3 id=\"水仙花数\"><a href=\"#水仙花数\" class=\"headerlink\" title=\"水仙花数\"></a>水仙花数</h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void narcissus()&#123;</span><br><span class=\"line\">        for (int i=100;i&lt;1000;i++)&#123;</span><br><span class=\"line\">            int a = i%10;</span><br><span class=\"line\">            int b = i/100;</span><br><span class=\"line\">            int c = i%100/10;</span><br><span class=\"line\">            if (a*a*a+b*b*b+c*c*c==i)&#123;</span><br><span class=\"line\">                System.out.println(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>","keywords":null,"cover":null,"content":null,"text":"通过简单算法浅谈学习方法先说两个简单的算法。水仙花数1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>public static void narcissus()&#123;<br>        for (int i=100;","link":"","raw":null,"photos":[],"categories":[{"name":"杂谈","slug":"杂谈","count":1,"path":"api/categories/杂谈.json"}],"tags":[{"name":"学习方法","slug":"学习方法","count":1,"path":"api/tags/学习方法.json"}]},{"title":"selenium+testng实现数据驱动测试","slug":"selenium-testng实现数据驱动测试","date":"2018-11-24T03:25:19.000Z","updated":"2018-11-24T13:29:12.124Z","comments":true,"path":"api/articles/selenium-testng实现数据驱动测试.json","excerpt":"<h1 id=\"selenium-testng实现数据驱动测试\"><a href=\"#selenium-testng实现数据驱动测试\" class=\"headerlink\" title=\"selenium+testng实现数据驱动测试\"></a>selenium+testng实现数据驱动测试</h1><hr>\n<p>注：所有的博文中基本不会提及环境搭建项目创建之类的内容，前人所述甚多， 请自行百度/Google/Wiki查询。一般情况下我的代码中也不会有太多注释，因为在<strong>解释</strong>中都会说明，请自行对照理解。</p>\n<hr>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>selenium我们都知道是用来做功能自动化测试的工具， 在实际使用的时候， 就会发现有很多局限性。 比如有这么一个场景： 模拟N个不同账号的登录。<br>分解一下步骤：<br>1.打开登录网页<br>2.输入账号密码，登录<br>3.验证登录成功，退出登陆<br>4.重复以上操作<br>单独使用selenium实现的话就非常繁琐了， N个账号， 难道我们要写N个输入的case吗？但从结果不考虑其它因素的话当然可以，但是这样的做法有很多问题，比如：<br>1.在编写脚本的时候已经手动输入了每组账号密码，速度恐怕还没有直接手工测试来的快。<br>2.执行脚本时， 如果当中某一个case出了问题， 那么脚本就停止了， 后续不会再继续执行。<br>3.如果要求执行此脚本之后继续执行其它脚本， 还需要人工监控等到此脚本执行结束， 再手动执行其它脚本。 需要手动的自动化测试， 我是很想吐槽啊。<br>这种时候就需要借助外力了， 比如testng。<br>什么是testng？ 不作赘述， 简单来说就是一个帮助测试的框架工具。 好处太多说不过来， 对于目前的我们来说只需要知道， 用它可以解决我们上面所说的所有问题。<br>总结一下就是： selenium编写基础脚本， testng可以帮我们进行自动化脚本的控制。</p>","keywords":null,"cover":"/2018/11/24/selenium-testng实现数据驱动测试/1.jpg","content":null,"text":"selenium+testng实现数据驱动测试注：所有的博文中基本不会提及环境搭建项目创建之类的内容，前人所述甚多， 请自行百度/Google/Wiki查询。一般情况下我的代码中也不会有太多注释，因为在解释中都会说明，请自行对照理解。思路selenium我们都知道是用来做功能自动","link":"","raw":null,"photos":[],"categories":[{"name":"测试相关","slug":"测试相关","count":2,"path":"api/categories/测试相关.json"}],"tags":[{"name":"selenium","slug":"selenium","count":2,"path":"api/tags/selenium.json"},{"name":"testng","slug":"testng","count":1,"path":"api/tags/testng.json"},{"name":"数据驱动","slug":"数据驱动","count":1,"path":"api/tags/数据驱动.json"},{"name":"自动化测试","slug":"自动化测试","count":1,"path":"api/tags/自动化测试.json"}]},{"title":"selenium编写简单爬虫","slug":"selenium爬虫","date":"2018-11-23T10:03:24.926Z","updated":"2018-11-24T03:36:22.133Z","comments":true,"path":"api/articles/selenium爬虫.json","excerpt":"<h1 id=\"用Selenium编写简单爬虫\"><a href=\"#用Selenium编写简单爬虫\" class=\"headerlink\" title=\"用Selenium编写简单爬虫\"></a>用Selenium编写简单爬虫</h1><hr>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>一般说到爬虫都是想到用python scrapy去写， 思路就是定位需要的数据所在元素， 然后进行相应处理。 说到元素定位， selenium中也拥有丰富的元素定位方法， 只是我们在定位了元素之后都是用来测试用，那么元素定位之后直接进行数据的提取和处理， 不也就成了一个爬虫了嘛。</p>","keywords":null,"cover":"/2018/11/23/selenium爬虫/1.jpg","content":null,"text":"用Selenium编写简单爬虫思路一般说到爬虫都是想到用python scrapy去写， 思路就是定位需要的数据所在元素， 然后进行相应处理。 说到元素定位， selenium中也拥有丰富的元素定位方法， 只是我们在定位了元素之后都是用来测试用，那么元素定位之后直接进行数据的提取","link":"","raw":null,"photos":[],"categories":[{"name":"测试相关","slug":"测试相关","count":2,"path":"api/categories/测试相关.json"}],"tags":[{"name":"selenium","slug":"selenium","count":2,"path":"api/tags/selenium.json"},{"name":"爬虫","slug":"爬虫","count":2,"path":"api/tags/爬虫.json"}]},{"title":"Markdown 语法","slug":"Markdown","date":"2018-11-22T15:10:56.000Z","updated":"2018-11-23T16:25:20.155Z","comments":true,"path":"api/articles/Markdown.json","excerpt":"<h1>Markdown 语法 (简体中文版)</h1>\n\n<p></p><p><strong>注意：</strong> 这份文档派生于<a href=\"http://markdown.tw/\" target=\"_blank\" rel=\"noopener\">繁体中文版</a>，在此基础上进行了繁体转简体工作，并进行了适当的润色。此文档用 Markdown 语法编写，你可以到这里<a href=\"http://gitcafe.com/riku/Markdown-Syntax-CN/blob/master/syntax.md\" target=\"_blank\" rel=\"noopener\">查看它的源文件</a>。</p><p></p>\n<p></p><p><strong>注意：</strong>繁体中文版的原始文件可以<a href=\"https://github.com/othree/markdown-syntax-zhtw/blob/master/syntax.md\" target=\"_blank\" rel=\"noopener\">查看这里</a> 。</p><br>","keywords":null,"cover":null,"content":null,"text":"Markdown 语法 (简体中文版)注意： 这份文档派生于繁体中文版，在此基础上进行了繁体转简体工作，并进行了适当的润色。此文档用 Markdown 语法编写，你可以到这里查看它的源文件。注意：繁体中文版的原始文件可以查看这里 。<br>概述哲学行内 HTML特殊字符自动转换<","link":"","raw":null,"photos":[],"categories":[{"name":"文档","slug":"文档","count":2,"path":"api/categories/文档.json"}],"tags":[{"name":"Markdown语法","slug":"Markdown语法","count":1,"path":"api/tags/Markdown语法.json"}]}]}